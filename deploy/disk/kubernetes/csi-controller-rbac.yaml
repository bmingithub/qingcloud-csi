#  Copyright (C) 2018 Yunify, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this work except in compliance with the License.
#  You may obtain a copy of the License in the LICENSE file, or at:
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# In production, this needs to be in separate files, e.g. service account and
# role and role binding needs to be created once, while stateful set may
# require some tuning.

apiVersion: v1
kind: ServiceAccount
metadata:
  name: csi-qingcloud-controller
  namespace: kube-system
  labels:
    app: "csi-qingcloud"
    role: "controller"
    csi: "v1.1.0"
    owner: "yunify"

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-qingcloud-provisioner
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "provisioner"
    csi: "v1.1.0"
    owner: "yunify"
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshots"]
    verbs: ["get", "list"]
  - apiGroups: ["snapshot.storage.k8s.io"]
    resources: ["volumesnapshotcontents"]
    verbs: ["get", "list"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-qingcloud-attacher
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "attacher"
    csi: "v1.1.0"
    owner: "yunify"
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csinodeinfos"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
---
# Resizer must be able to work with PVCs, PVs, SCs.
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-qingcloud-resizer
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "resizer"
    csi: "v1.1.0"
    owner: "yunify"
rules:
  # The following rule should be uncommented for plugins that require secrets
  # for provisioning.
  # - apiGroups: [""]
  #   resources: ["secrets"]
  #   verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "update", "patch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumeclaims/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["list", "watch", "create", "update", "patch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-qingcloud-cluster-driver-registrar
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "cluster-registrar"
    csi: "v1.1.0"
    owner: "yunify"
rules:
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: ["csi.storage.k8s.io"]
    resources: ["csidrivers"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-qingcloud-controller
  labels:
    app: "csi-qingcloud"
    role: "controller"
    csi: "v1.1.0"
    owner: "yunify"
aggregationRule:
  clusterRoleSelectors:
  - matchLabels:
      app: "csi-qingcloud"
  - matchLabels:
      role: "controller"
  - matchLabels:
      csi: "v1.1.0"
  - matchLabels:
      owner: "yunify"
rules: []
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-qingcloud-controller
  labels:
    app: "csi-qingcloud"
    role: "controller"
    csi: "v1.1.0"
    owner: "yunify"
subjects:
  - kind: ServiceAccount
    name: csi-qingcloud-controller
    namespace: kube-system
roleRef:
  kind: ClusterRole
  name: csi-qingcloud-controller
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: kube-system
  name: csi-qingcloud-provisioner
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "provisioner"
    csi: "v1.1.0"
    owner: "yunify"
rules:
  # Only one of the following rules for endpoints or leases is required based on
  # what is set for `--leader-election-type`. Endpoints are deprecated in favor of Leases.
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-qingcloud-provsioner
  namespace: kube-system
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "provisioner"
    csi: "v1.1.0"
    owner: "yunify"
subjects:
  - kind: ServiceAccount
    name: csi-qingcloud-controller
    namespace: kube-system
roleRef:
  kind: Role
  name: csi-qingcloud-provisioner
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  # replace with non-default namespace name
  namespace: kube-system
  name: csi-qingcloud-attacher
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "attacher"
    csi: "v1.1.0"
    owner: "yunify"
rules:
  # access to configmaps is only supported for backwards compatibility reasons
  # and can be removed once you are uses Leases (--leader-election-type=leases)
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-qingcloud-attacher
  namespace: kube-system
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "attacher"
    csi: "v1.1.0"
    owner: "yunify"
subjects:
  - kind: ServiceAccount
    name: csi-qingcloud-controller
    namespace: kube-system
roleRef:
  kind: Role
  name: csi-qingcloud-attacher
  apiGroup: rbac.authorization.k8s.io
---
# Resizer must be able to work with end point in current namespace
# if (and only if) leadership election is enabled
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  # replace with non-default namespace name
  name: csi-qingcloud-resizer
  namespace: kube-system
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "attacher"
    csi: "v1.1.0"
    owner: "yunify"
rules:
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: csi-qingcloud-resizer
  namespace: kube-system
  labels:
    app: "csi-qingcloud"
    role: "controller"
    tier: "attacher"
    csi: "v1.1.0"
    owner: "yunify"
subjects:
  - kind: ServiceAccount
    name: csi-resizer
    # replace with non-default namespace name
    namespace: default
roleRef:
  kind: Role
  name: csi-qingcloud-resizer
  apiGroup: rbac.authorization.k8s.io